kernel:
  image: linuxkit/kernel:4.9.78
  cmdline: "console=ttyS1 rootfstype=tmpfs"
init:
  - iidlx/openrc:3f347f376552a78462a13aa898e01743ede4bde4
  - iidlx/containerd:dd71f4fc21d5784eb04b12cd54b10b2df164964e-dirty
  - iidlx/runc:8f2312eb99a074e4f9f9931457d7f13a4399ad8b
  - iidlx/dockerd:58f47eb06582ff4901bd631227c99861bfbab90b-dirty
  - iidlx/kubernetes:ffd8d6643dfd4db2b7cf4f085bf14d59951f5be8-dirty
  - iidlx/etcd3:b0b95ed385a8fc63bb539f7f9031981c0c8d7ffa
  - iidlx/cni:faaa05f98a9b208b1d1174e28a5dd3fd6d9688d1
  - linuxkit/ca-certificates:de21b84d9b055ad9dcecc57965b654a7a24ef8e0
  - linuxkit/firmware:8fc7d7702589b67e5b1aa72bb61cc72b47a048aa
files:
  - path: /init
    symlink: "/bin/busybox"
  - path: etc/runlevels/sysinit/sysfs
    symlink: "/etc/init.d/sysfs"
  - path: etc/runlevels/sysinit/devfs
    symlink: "/etc/init.d/devfs"
  - path: etc/runlevels/sysinit/procfs
    symlink: "/etc/init.d/procfs"
  - path: etc/runlevels/sysinit/mdev
    symlink: "/etc/init.d/mdev"
  - path: etc/runlevels/sysinit/hwclock
    symlink: "/etc/init.d/hwclock"
  - path: etc/runlevels/boot/hostname
    symlink: "/etc/init.d/hostname"
  - path: etc/runlevels/default/containerd
    symlink: "/etc/init.d/containerd"
  - path: etc/runlevels/boot/networking
    symlink: "/etc/init.d/networking"
  - path: etc/runlevels/boot/loop-back
    symlink: "/etc/init.d/loop-back"
  - path: etc/modules-load.d/packet.conf
    source: packet.conf
  - path: etc/network/interfaces
    contents: |
      auto eth0
      iface eth0 inet dhcp
              post-up echo 'nameserver 147.75.94.157' > /etc/resolv.conf
  - path: etc/hostname
    contents: |
      master-node2.goppa-internal.io
  - path: etc/docker/daemon.json
    contents: '{"debug": true}'
  - path: etc/containerd/config.toml
    contents: |
      state = "/run/containerd"
      root = "/var/lib/containerd"
      snapshotter = "io.containerd.snapshotter.v1.overlayfs"
      differ = "io.containerd.differ.v1.base-diff"
      subreaper = false

      [grpc]
      address = "/run/containerd/containerd.sock"
      uid = 0
      gid = 0

      [debug]
      address = "/run/containerd/debug.sock"
      level = "info"

      [metrics]
      address = ":13337"

  - path: etc/init.d/etcd
    mode: "777"
    contents: |
      #!/sbin/openrc-run

      description="etcd"
      pidfile="/run/$RC_SVCNAME/$RC_SVCNAME.pid"
      name=$RC_SVCNAME
      #supervisor=start-stop-daemon

      command=/usr/bin/etcd
      command_args="--name master-node2 --discovery-srv goppa-internal.io --initial-advertise-peer-urls http://master-node2.goppa-internal.io:2380 --initial-cluster-token etcd-cluster-1 --initial-cluster-state new --advertise-client-urls http://master-node2.goppa-internal.io:2379 --listen-client-urls http://0.0.0.0:2379 --listen-peer-urls http://0.0.0.0:2380"
      command_background="true"
      start_stop_daemon_args="--stdout /var/log/etcd/${RC_SVCNAME}.log --stderr /var/log/etcd/${RC_SVCNAME}.log"
      depend() {
        #need loop-back
        provide etcd
      }


      start_pre()
      {
          # Ensure Service/Log DIR exits
          mkdir -p /run/$RC_SVCNAME/
          mkdir -p /var/log/$RC_SVCNAME/
      }

  - path: etc/init.d/kubelet
    mode: "777"
    contents: | 
      #!/sbin/openrc-run

      description="Kubelet"
      pidfile="/run/$RC_SVCNAME/$RC_SVCNAME.pid"
      name=$RC_SVCNAME
      #supervisor=start-stop-daemon

      command=/usr/bin/kubelet
      command_args="--allow-privileged=true --cgroup-root=/ --cluster-dns=100.64.0.10 --cluster-domain=cluster.local --enable-debugging-handlers=true --eviction-hard='memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%' --kubeconfig=/var/lib/kubelet/kubeconfig --network-plugin-mtu=9001 --network-plugin=kubenet --node-labels=kubernetes.io/role=master --non-masquerade-cidr=100.64.0.0/10 --pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0 --register-with-taints=node-role.kubernetes.io/master=:NoSchedule --v=2 --cni-bin-dir=/opt/cni/bin/ --cni-conf-dir=/etc/cni/net.d/"
      command_background="true"
      start_stop_daemon_args="--stdout /var/log/kubelet/${RC_SVCNAME}.log --stderr /var/log/kubelet/${RC_SVCNAME}.log"
     
      depend() {
        need dockerd
        provide kubelet
      }   


      start_pre()
      {
          # Ensure Service/Log DIR exits
          mkdir -p /run/$RC_SVCNAME/
          mkdir -p /var/log/$RC_SVCNAME/
      }

  - path: var/lib/kubelet/kubeconfig
    contents: |
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority: /etc/srv/kubernetes/pki/ca-certificates.crt 
          server: https://127.0.0.1:443
        name: local
      contexts:
      - context:
          cluster: local
          user: kubelet
        name: service-account-context
      current-context: service-account-context
      kind: Config
      users:
      - name: kubelet
        user:
          client-certificate: /etc/srv/kubernetes/pki/apiserver.crt 
          client-key: /etc/srv/kubernetes/pki/apiserver.key

  - path: etc/init.d/kube-apiserver
    mode: "777"
    contents: |
      #!/sbin/openrc-run

      description="Kube Apiserver"
      pidfile="/run/$RC_SVCNAME/$RC_SVCNAME.pid"
      name=$RC_SVCNAME
      #supervisor=start-stop-daemon

      command=/usr/bin/kube-apiserver
      command_args="--insecure-bind-address=127.0.0.1 --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,ResourceQuota,PersistentVolumeLabel --allow-privileged=true --anonymous-auth=false --apiserver-count=3 --basic-auth-file=/etc/srv/kubernetes/basic_auth.csv --client-ca-file=/etc/srv/kubernetes/pki/ca-certificates.crt --etcd-servers=http://etcd.goppa-internal.io:2379 --insecure-port=8080 --kubelet-preferred-address-types=InternalIP,Hostname,ExternalIP --secure-port=443 --service-cluster-ip-range=100.64.0.0/13 --storage-backend=etcd3 --tls-cert-file=/etc/srv/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/srv/kubernetes/pki/apiserver.key --token-auth-file=/etc/srv/kubernetes/known_tokens.csv --authorization-mode=AlwaysAllow --v=2" 
      command_background="true"
      start_stop_daemon_args="--stdout /var/log/kube-apiserver/${RC_SVCNAME}.log --stderr /var/log/kube-apiserver/${RC_SVCNAME}.log"

      depend() {
        need etcd
        provide kube-apiserver
      }


      start_pre()
      {
          # Ensure Service/Log DIR exits
          mkdir -p /run/$RC_SVCNAME/
          mkdir -p /var/log/$RC_SVCNAME/
      }

  - path: etc/init.d/kube-controller-manager
    mode: "777"
    contents: |
      #!/sbin/openrc-run

      description="Kube Controller Manager"
      pidfile="/run/$RC_SVCNAME/$RC_SVCNAME.pid"
      name=$RC_SVCNAME
      #supervisor=start-stop-daemon

      command=/usr/bin/kube-controller-manager
      command_args="--allocate-node-cidrs=true --attach-detach-reconcile-sync-period=1m0s --cluster-cidr=100.96.0.0/11 --cluster-name=kubernetes --configure-cloud-routes=true --leader-elect=true --root-ca-file=/etc/srv/kubernetes/pki/ca-certificates.crt --service-account-private-key-file=/etc/srv/kubernetes/pki/apiserver.key --service-cluster-ip-range=100.64.0.0/13 --use-service-account-credentials=true --v=2 --kubeconfig=/var/lib/kube-controller-manager/kubeconfig --cluster-signing-cert-file=/etc/srv/kubernetes/pki/ca-certificates.crt --cluster-signing-key-file=/etc/srv/kubernetes/pki/ca-certificates.key"
      command_background="true"
      start_stop_daemon_args="--stdout /var/log/kube-controller-manager/${RC_SVCNAME}.log --stderr /var/log/kube-controller-manager/${RC_SVCNAME}.log"

      start_pre()
      {
          # Ensure Service/Log DIR exits
          mkdir -p /run/$RC_SVCNAME/
          mkdir -p /var/log/$RC_SVCNAME/
      }
  - path: var/lib/kube-controller-manager/kubeconfig
    contents: |
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority: /etc/srv/kubernetes/pki/ca-certificates.crt
          server: https://127.0.0.1:443
        name: local
      contexts:
      - context:
          cluster: local
          user: kube-controller-manager
        name: service-account-context
      current-context: service-account-context
      kind: Config
      users:
      - name: kube-controller-manager
        user:
          client-certificate: /etc/srv/kubernetes/pki/apiserver.crt
          client-key: /etc/srv/kubernetes/pki/apiserver.key


  - path: etc/init.d/kube-scheduler
    mode: "777"
    contents: |
      #!/sbin/openrc-run

      description="Kube Scheduler"
      pidfile="/run/$RC_SVCNAME/$RC_SVCNAME.pid"
      name=$RC_SVCNAME
      #supervisor=start-stop-daemon

      command=/usr/bin/kube-scheduler
      command_args="--leader-elect=true --v=2 --kubeconfig=/var/lib/kube-scheduler/kubeconfig"
      command_background="true"
      start_stop_daemon_args="--stdout /var/log/kube-scheduler/${RC_SVCNAME}.log --stderr /var/log/kube-scheduler/${RC_SVCNAME}.log"

      start_pre()
      {
          # Ensure Service/Log DIR exits
          mkdir -p /run/$RC_SVCNAME/
          mkdir -p /var/log/$RC_SVCNAME/
      }


  - path: var/lib/kube-scheduler/kubeconfig
    contents: |
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority: /etc/srv/kubernetes/pki/ca-certificates.crt
          server: https://127.0.0.1:443
        name: local
      contexts:
      - context:
          cluster: local
          user: kube-scheduler
        name: service-account-context
      current-context: service-account-context
      kind: Config
      users: 
      - name: kube-scheduler
        user:
          client-certificate: /etc/srv/kubernetes/pki/apiserver.crt
          client-key: /etc/srv/kubernetes/pki/apiserver.key

  - path: etc/init.d/kube-proxy
    mode: "777"
    contents: |
      #!/sbin/openrc-run

      description="Kube Proxy"
      pidfile="/run/$RC_SVCNAME/$RC_SVCNAME.pid"
      name=$RC_SVCNAME
      #supervisor=start-stop-daemon

      command=/usr/bin/kube-proxy
      command_args="--kubeconfig=/var/lib/kube-proxy/kubeconfig --conntrack-max-per-core=131072 --resource-container="" --cluster-cidr=100.96.0.0/11 --v=2"
      command_background="true"
      start_stop_daemon_args="--stdout /var/log/kube-proxy/${RC_SVCNAME}.log --stderr /var/log/kube-proxy/${RC_SVCNAME}.log"

      start_pre()
      {
          # Ensure Service/Log DIR exits
          mkdir -p /run/$RC_SVCNAME/
          mkdir -p /var/log/$RC_SVCNAME/
      }


  - path: var/lib/kube-proxy/kubeconfig
    contents: |
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority: /etc/srv/kubernetes/pki/ca-certificates.crt
          server: https://127.0.0.1:443
        name: local
      contexts:
      - context:
          cluster: local
          user: kube-proxy
        name: service-account-context
      current-context: service-account-context
      kind: Config
      users:
      - name: kube-proxy
        user:
          client-certificate: /etc/srv/kubernetes/pki/apiserver.crt
          client-key: /etc/srv/kubernetes/pki/apiserver.key

  - path: etc/srv/kubernetes/pki/ca-certificates.crt
    source: secrets/ca.crt
  - path: etc/srv/kubernetes/pki/ca-certificates.key
    source: secrets/ca.key
  - path: etc/srv/kubernetes/pki/apiserver.crt
    source: secrets/apiserver.crt
  - path: etc/srv/kubernetes/pki/apiserver.key
    source: secrets/apiserver.key
  - path: etc/srv/kubernetes/basic_auth.csv
    source: secrets/basic_auth.csv
  - path: etc/srv/kubernetes/known_tokens.csv
    source: secrets/known_tokens.csv
  - path: etc/runlevels/default/dockerd
    symlink: "/etc/init.d/dockerd"
  - path: etc/runlevels/default/kubelet
    symlink: "/etc/init.d/kubelet"
  - path: etc/runlevels/default/etcd
    symlink: "/etc/init.d/etcd"
  - path: etc/runlevels/default/kube-apiserver
    symlink: "/etc/init.d/kube-apiserver"
  - path: etc/runlevels/default/kube-controller-manager
    symlink: "/etc/init.d/kube-controller-manager"
  - path: etc/runlevels/default/kube-scheduler
    symlink: "/etc/init.d/kube-scheduler"
  - path: etc/runlevels/default/kube-proxy
    symlink: "/etc/init.d/kube-proxy"

trust:
  org:
    - linuxkit
    - library
